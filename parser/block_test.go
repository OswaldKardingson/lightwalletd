// Copyright (c) 2019-2020 The Zcash developers
// Copyright (c) 2019-2024 Pirate Chain developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

package parser

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"testing"

	"github.com/pkg/errors"
	"github.com/stretchr/testify/assert"

	protobuf "google.golang.org/protobuf/proto"
)

func TestCompactBlocks(t *testing.T) {
	type compactTest struct {
		BlockHeight int    `json:"block"`
		BlockHash   string `json:"hash"`
		PrevHash    string `json:"prev"`
		Full        string `json:"full"`
		Compact     string `json:"compact"`
	}
	var compactTests []compactTest

	blockJSON, err := io.ReadFile("../testdata/compact_blocks.json")
	if err != nil {
		t.Fatal(err)
	}

	err = json.Unmarshal(blockJSON, &compactTests)
	if err != nil {
		t.Fatal(err)
	}

	for _, test := range compactTests {
		blockData, _ := hex.DecodeString(test.Full)
		block := NewBlock()
		blockData, err = block.ParseFromSlice(blockData)
		if err != nil {
			t.Error(errors.Wrap(err, fmt.Sprintf("parsing testnet block %d", test.BlockHeight)))
			continue
		}
		if len(blockData) > 0 {
			t.Error("Extra data remaining")
		}
		if block.GetHeight() != test.BlockHeight {
			t.Errorf("incorrect block height in testnet block %d", test.BlockHeight)
			continue
		}
		if hex.EncodeToString(block.GetDisplayHash()) != test.BlockHash {
			t.Errorf("incorrect block hash in testnet block %x", test.BlockHash)
			continue
		}
		if hex.EncodeToString(block.GetDisplayPrevHash()) != test.PrevHash {
			t.Errorf("incorrect block prevhash in testnet block %x", test.BlockHash)
			continue
		}
		if !bytes.Equal(block.GetPrevHash(), block.hdr.HashPrevBlock) {
			t.Error("block and block header prevhash don't match")
		}

		compact := block.ToCompact()
		marshaled, err := protobuf.Marshal(compact)
		if err != nil {
			t.Errorf("could not marshal compact testnet block %d", test.BlockHeight)
			continue
		}
		encodedCompact := hex.EncodeToString(marshaled)
		if encodedCompact != test.Compact {
			t.Errorf("wrong data for compact testnet block %d\nhave: %s\nwant: %s\n", test.BlockHeight, encodedCompact, test.Compact)
			break
		}
	}
}

// New tests for MerkleFrontier integration

func getValidBlockData() []byte {
	// Mock valid block data 
	// pirate-cli getblock 000000004af2561c80453ae05b51c259dff5e313609ef6a1a76e6c661a0874b0 0
	return []byte{
		/* 
 */
	}
}

func getEmptyBlockData() []byte {
	//  pirate-cli getblock 000000017600b61191969793d2d61657ea099546ff3e0bff48dba601a33954ad 0
	hexData := 
		"last_notarized_height": 3210266,
		"hash": "000000017600b61191969793d2d61657ea099546ff3e0bff48dba601a33954ad",
		"confirmations": 50,
		"rawconfirmations": 50,
		"size": 1608,
		"height": 3210229,
		"version": 4,
		"merkleroot": "18041cad0c8839908ff543700d3060eaee436505708355b3b2f25bc8e9530531",
		"segid": -1,
		"finalsaplingroot": "170af3efbdc041548123896eefc034c89d42a0f08058b73a1480daa13af03503",
		"tx": [
		  "18041cad0c8839908ff543700d3060eaee436505708355b3b2f25bc8e9530531"
		],
		"time": 1733622086,
		"nonce": "76bf01a80000000000000000000500000000000000000000000000001477f85f",
		"solution": "01d13acb307c3507ff8f9764957a7a327e529c32390ec1015532544baeb2e077a6946c22f6f5fd9827e41045bcf2edb7aa15c727a3e469da43bed2beb6a7652dd2b3808e9fad4f0bcf35303badf6fe0cc23fb2e506468cf1645ef141d8c7f693536b223ed1ffd9d983444ce4ac0b6e7be9a4591457d82e8277764fff91a71ca88c701ca28021550ad633c7d3a6d63d76357bcb3a26da6e2ee98ead58d4480947f082e20f1f373551053a352c95876aad6de6721932350cb99b7c9c390110e16ff48acd973ece950163ba0f92311ffef4901a0b93afb350e93e4f9ed02222d3d219fddffe32a4c20deb1a1a87c5faec4ff1d5e4db4a434f0e805dfcdc1c77af3aa6676a09bb54b20af925cfac83fa159b841d62a32cb88de65775471263429c9fb5772d1156eb2f3351a21b12c44bdd01831fd225457f5abfdfc5a4340f5ee2f51ba40bdf3775dd95d84d59ad047771270687c10b55aeeeedf211d32225f07bc8f17e1d04a438b0dbba2e226381b285c66265f50479b326b4db3119329bfc2f31dc6bcd19c65a8fb7f49ab1e81f1aeb31f1eea6064d726b741a682eb27c19be6e287aa42307c51fed8c8c5cdca4b8957694d6822192d49b9c76192c212e5e981187dad79602b6f07f31ea993e04661167aad1295013f34c5204c0b0ee716ac7af1cc191265e4e62e85866ace068283bca483bd25d22ddb8dd095eed6e05520457e32905697938ecd2f8651c79b123a3b73ed094b420ec60024f29a9b7fd85f25765970c51936a9a67d54b6a8bc16372b96e2e66d313a5a13e769a216428249b8b89d75c063fae91f5117d4bc62426f34b33096649c5fcb50bc44f3cce1cf3957ff73f7eb2ca97156c31432d257333d190dbd3863ee91c3060fc7993f2cf9bcc81e4f254ca5071526eefcd6237ef0f899560a77da1a5643ab7dfd96e8ffdb518b40227502659114fc53850e167f89582390ac97f42911c466b769c4f024cb1f09392f07ca2616e3eebee450d9e29472c9434a540fe54e70859bc4951950ef7e1100f32bf915d99c30b2c3251a2abf3b0e68a587952047dfdaa8360557d2508c217de98a86a5104bd9edb4e9b6aab5ad454e7e67e07e5b361ef1dfbd17fe7d8055fa1611d66c0278b94c1c490b900420af2b85d061af252874255455534aac3c3d2cfc435121b139b900255d8202e06fc80aa94c1cb4cd35f8d240b79403c0afa5d640a8ed74319bf740ed3dc82e1a660136dd2192375769f273b71c884f2809fc7ae414d8d741512280dd7c8084f1ed76a130469c94de57a1ff97237010eabf2a494f29067a7d672122e6ec281916cee1b8b291f7ef0628fde87daa5c3abc2afcd59d14173a94710f90e61056826097dde08a9ecc8d9625eeedb758a601ea6e3c1f87081f27c58d57579e6c311e55e9d8c022763f3002e3c01adbb81982c27259d9c003194b82d14d27b3511c5afa169630c9a2614f677413ce14c063d6cf2089bf06d1698c0d838e51975a16572d01525cdfb11dae3bf698ae213512fc6b72e37661d0f62067e9b847a9c9587bdcbc7cc5273c8c60c18b7b6760b9b4e027ee7334197d6a0fa3ddeef748e2e533d930f75a4a3be137e3db380c4682d38123a87f9f64a761d4904012bc8338875949262c9abc21dd4031fa66c05c583058c710ce5b8694131862c0b384ef086e7cb16b84e0585ffa8e7fe56634a1d5b885a671ddebcef49fa76a1a6aacc1de92e36409a4d1eaa7bce9e17a553555a9e0499a0d5478e85e7954a350e6497fab863097f0b76bb4d8adb720ca567083fb70db424adb0d42f75eaf1ada0e6d53e1014b66a7f6af9fc77348fe52de744cf7ed4ff3107b7f32ed023ca9573b13a43a937bcfb0509983e4552da9b0c5059c3af2338dc94c0",
		"bits": "1d01b9d8",
		"difficulty": 146380141.6677276,
		"chainwork": "00000000000000000000000000000000000000000000000000d0db20d5371e3e",
		"anchor": "666dece9764c9b2b41fadea44086d3323633845d811e3e61bd829caebef7651e",
		"chainSupply": {
		  "monitored": true,
		  "chainValue": 198428749.75684738,
		  "chainValueZat": 19842874975684738,
		  "valueDelta": 1.00000000,
		  "valueDeltaZat": 100000000
		},
		"valuePools": [
		  {
			"id": "transparent",
			"monitored": true,
			"chainValue": 181178.70448083,
			"chainValueZat": 18117870448083,
			"valueDelta": 1.00000000,
			"valueDeltaZat": 100000000
		  },
		  {
			"id": "sprout",
			"monitored": true,
			"chainValue": 1294335.32384994,
			"chainValueZat": 129433532384994,
			"valueDelta": 0.00000000,
			"valueDeltaZat": 0
		  },
		  {
			"id": "sapling",
			"monitored": true,
			"chainValue": 196953235.72851661,
			"chainValueZat": 19695323572851661,
			"valueDelta": 0.00000000,
			"valueDeltaZat": 0
		  },
		  {
			"id": "burned",
			"monitored": true,
			"chainValue": 0.00000000,
			"chainValueZat": 0,
			"valueDelta": 0.00000000,
			"valueDeltaZat": 0
		  }
		],
		"previousblockhash": "00000000857b8564e53b6c2c6dd20620566610c05b909e0c2fc977437ae0f005",
		"nextblockhash": "0000000107811ce9453769e1ed03a32901286f8c8b8443d215d2a31638a8c68d"
	  

	// Decode the hex string into a byte slice
	data, err := hex.DecodeString(hexData)
	if err != nil {
		log.Fatalf("Failed to decode hex string: %v", err)
	}
	return data
}

func getCorruptBlockData() []byte {
	// Mock corrupt block data
	return []byte{
		/* 
 */
	}
}

func TestParseFromSliceWithMerkleFrontier(t *testing.T) {
	// Case 1: Valid block with multiple transactions
	block := NewBlock()
	data := getValidBlockData() // Mock valid block data
	_, err := block.ParseFromSlice(data)
	assert.NoError(t, err, "Parsing a valid block should not produce an error")
	assert.NotNil(t, block.MerkleFrontier, "MerkleFrontier should be initialized")
	assert.NotEmpty(t, block.MerkleFrontier.GetRoot(), "Merkle root should not be empty for valid block")

	// Case 2: Empty block
	block = NewBlock()
	data = getEmptyBlockData() // Mock empty block data
	_, err = block.ParseFromSlice(data)
	assert.NoError(t, err, "Parsing an empty block should not produce an error")
	assert.Empty(t, block.MerkleFrontier.GetRoot(), "Merkle root should be empty for an empty block")

	// Case 3: Invalid block with corrupt transaction
	block = NewBlock()
	data = getCorruptBlockData() // Mock corrupt block data
	_, err = block.ParseFromSlice(data)
	assert.Error(t, err, "Parsing a block with corrupt transaction should produce an error")
}

func TestMerkleFrontierQueries(t *testing.T) {
	// Mock a block with multiple transactions
	block := NewBlock()
	data := getValidBlockData() // Mock valid block data
	_, err := block.ParseFromSlice(data)
	assert.NoError(t, err)

	// Case 1: Generate Merkle root
	root, err := block.GetMerkleRoot()
	assert.NoError(t, err, "Getting Merkle root should not produce an error")
	assert.NotEmpty(t, root, "Merkle root should not be empty")

	// Case 2: Generate proof for valid transaction index
	proof, err := block.MerkleFrontier.GenerateProof(0) // Proof for first transaction
	assert.NoError(t, err, "Generating proof for valid transaction should not produce an error")
	assert.NotNil(t, proof, "Proof should not be nil")

	// Case 3: Generate proof for invalid transaction index
	proof, err = block.MerkleFrontier.GenerateProof(999) // Out-of-bounds index
	assert.Error(t, err, "Generating proof for invalid index should produce an error")
	assert.Nil(t, proof, "Proof for invalid index should be nil")
}
